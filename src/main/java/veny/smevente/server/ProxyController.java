package veny.smevente.server;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;


/**
 * Proxy Controller.
 *
 * Because the feedback service 'getaninsight.com' does not work over HTTPs
 * it can't be used with secured application (unsecured content problem).
 *
 * Instead of making calls directly to the web service,
 * you make your calls to your web server proxy.
 * The proxy then passes the call onto the web service
 * and in return passes the data back to your client application.
 *
 * @author Vaclav Sykora [vaclav.sykora@gmail.com]
 * @since 23.10.2014
 */
@Controller
public class ProxyController {

    /** Logger. */
    private static final Logger LOG = Logger.getLogger(PingController.class.getName());

    /** Salt for hash serving as check of links generated by this controller. */
    private String hashSalt;

    /**
     * Proxies a request to destination defined by given HTTP parameter.
     *
     * @param urlParam URL of destination
     * @param request HTTP request
     * @param response HTTP response
     * @throws IOException if something goes wrong
     */
    @RequestMapping(value = "/proxy/")
    public final void proxyCall(
            @RequestParam(required = true, value = "url") final String urlParam,
            final HttpServletRequest request, final HttpServletResponse response)
        throws IOException {

        // URL needs to be decoded
        final String proxiedUrl = URLDecoder.decode(urlParam, "utf-8");

        final OutputStreamWriter writer = new OutputStreamWriter(response.getOutputStream());
        final CloseableHttpClient httpclient = HttpClients.createDefault();

        // to prevent from following a redirect !!!
        //httpclient.getParams().setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, false);

        // split this according to the type of request
        HttpRequestBase method = null;
        if (request.getMethod().equalsIgnoreCase("GET")) {
            method = new HttpGet(proxiedUrl);
        } else if (request.getMethod().equalsIgnoreCase("POST")) {
            method = new HttpPost(proxiedUrl);
        } else if (request.getMethod().equalsIgnoreCase("DELETE")) {
            method = new HttpDelete(proxiedUrl);
        } else if (request.getMethod().equalsIgnoreCase("HEAD")) {
            method = new HttpHead(proxiedUrl);
        } else {
            throw new IllegalArgumentException("unsupported HTTP method: " + request.getMethod());
        }
        //
//        method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);

        // copy parameters if POST
        if ("POST".equals(method.getMethod())) {
            final Enumeration<String> paramNames = request.getParameterNames();
            final List<NameValuePair> postParams = new ArrayList<NameValuePair>();
            while (paramNames.hasMoreElements()) {
                final String paramName = paramNames.nextElement();
                postParams.add(new BasicNameValuePair(paramName, request.getParameter(paramName)));
            }
            ((HttpPost) method).setEntity(new UrlEncodedFormEntity(postParams, "UTF-8"));
        }

        try {
            // Execute the method
            final CloseableHttpResponse proxiedResponse = httpclient.execute(method);
            try {
                final HttpEntity entity = proxiedResponse.getEntity();
                System.out.println("[I] response received, status=" + proxiedResponse.getStatusLine().toString());

                // handle status code, content type & content length
                response.setStatus(proxiedResponse.getStatusLine().getStatusCode());
                response.setContentType(entity.getContentType().getValue());
                response.setContentLength((int) entity.getContentLength());

                // Write the body, flush and close
                final String responseBodyAsString = EntityUtils.toString(entity);
                writer.write(responseBodyAsString);

                writer.flush();
            } finally {
                proxiedResponse.close();
            }
        } catch (final Exception e) {
            LOG.error("proxy failure", e);
            throw e;
        } finally {
            writer.close();
            httpclient.close();
        }
    }

}
